const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// Initialize SQLite database
const db = new sqlite3.Database('./tender_project.db');

// Create tables and initialize with default data
db.serialize(() => {
    // Create stages table
    db.run(`
        CREATE TABLE IF NOT EXISTS stages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            number INTEGER,
            name TEXT,
            icon TEXT,
            weeks TEXT,
            hours INTEGER,
            cost INTEGER,
            status TEXT,
            brief TEXT,
            description TEXT,
            progress INTEGER DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    `);

    // Create tasks table
    db.run(`
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            stage_id INTEGER,
            text TEXT,
            completed BOOLEAN DEFAULT 0,
            position INTEGER DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (stage_id) REFERENCES stages(id) ON DELETE CASCADE
        )
    `);

    // Create indexes
    db.run(`CREATE INDEX IF NOT EXISTS idx_stage_status ON stages(status)`);
    db.run(`CREATE INDEX IF NOT EXISTS idx_task_stage ON tasks(stage_id)`);
    
    // Check if data exists
    db.get("SELECT COUNT(*) as count FROM stages", (err, row) => {
        if (row && row.count === 0) {
            console.log('Initializing database with default data...');
            initializeDefaultData();
        } else {
            console.log(`Database contains ${row ? row.count : 0} stages`);
        }
    });
});

// Initialize default data
function initializeDefaultData() {
    const defaultStages = [
        {
            number: 1,
            name: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ + –±–∞–∑–æ–≤–æ–µ AI-—è–¥—Ä–æ',
            icon: 'üèóÔ∏è',
            weeks: '–ù–µ–¥–µ–ª–∏ 1-3',
            hours: 160,
            cost: 383000,
            status: 'complete',
            progress: 100,
            brief: '–°–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω —Å–µ—Ä–≤–∏—Å, –≥–æ—Ç–æ–≤–æ —è–¥—Ä–æ NLP-–∞–Ω–∞–ª–∏–∑–∞',
            description: '–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–ª–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –±–∞–∑–æ–≤–æ–µ AI-—è–¥—Ä–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–Ω–¥–µ—Ä–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.',
            tasks: [
                {text: '–°–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã', completed: true},
                {text: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI GPT-4', completed: true},
                {text: '–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —è–¥—Ä–æ NLP-–∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', completed: true},
                {text: '–°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ 44-–§–ó/223-–§–ó', completed: true},
                {text: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞', completed: true}
            ]
        },
        {
            number: 2,
            name: '–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫—É–ø–∫–∏',
            icon: 'üîç',
            weeks: '–ù–µ–¥–µ–ª–∏ 3-4',
            hours: 80,
            cost: 191000,
            status: 'progress',
            progress: 85,
            brief: '–ü–∞—Ä—Å–µ—Ä –∏–∑–≤–µ—â–µ–Ω–∏–π, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–∫–∏',
            description: '–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫—É–ø–æ—á–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.',
            tasks: [
                {text: '–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–∞—Ä—Å–µ—Ä –∏–∑–≤–µ—â–µ–Ω–∏–π –æ –∑–∞–∫—É–ø–∫–∞—Ö', completed: true},
                {text: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', completed: true},
                {text: '–°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫—É–ø–∫–µ', completed: true},
                {text: '–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ü–µ–Ω–∫–∏ –∑–∞—è–≤–æ–∫', completed: true},
                {text: '–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤', completed: false},
                {text: '–£–ª—É—á—à–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–æ–≤', completed: false}
            ]
        },
        {
            number: 3,
            name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–ï–ò–°, –ø–ª–∞—Ç–µ–∂–∏, Telegram)',
            icon: 'üîó',
            weeks: '–ù–µ–¥–µ–ª–∏ 5-6',
            hours: 160,
            cost: 363000,
            status: 'progress',
            progress: 60,
            brief: '–ü–æ–¥–∫–ª—é—á–µ–Ω—ã –≤–Ω–µ—à–Ω–∏–µ API, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫',
            description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏ –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏.',
            tasks: [
                {text: '–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SOAP API –ï–ò–°', completed: true},
                {text: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫—É–ø–∫–∞—Ö', completed: true},
                {text: '–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', completed: true},
                {text: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API', completed: true},
                {text: '–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—ã–π —à–ª—é–∑ –ÆKassa', completed: false},
                {text: '–ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram Bot API', completed: false},
                {text: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å email-—Ä–∞—Å—Å—ã–ª–∫—É', completed: false},
                {text: '–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å SMS-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', completed: false}
            ]
        },
        {
            number: 4,
            name: '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–∫–∞–±–∏–Ω–µ—Ç + –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)',
            icon: 'üíª',
            weeks: '–ù–µ–¥–µ–ª–∏ 7-8',
            hours: 136,
            cost: 268000,
            status: 'progress',
            progress: 70,
            brief: '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤–µ–±-UI, —Ñ–æ—Ä–º—ã, –Ω–∞–≤–∏–≥–∞—Ü–∏—è',
            description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.',
            tasks: [
                {text: '–°–æ–∑–¥–∞–Ω –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞', completed: true},
                {text: '–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', completed: true},
                {text: '–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞', completed: true},
                {text: '–°–æ–∑–¥–∞–Ω –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', completed: true},
                {text: '–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —á–∞—Å—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', completed: true},
                {text: '–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', completed: false},
                {text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', completed: false},
                {text: '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', completed: false}
            ]
        },
        {
            number: 5,
            name: '–ß–∞—Ç-–±–æ—Ç (LLM + Telegram)',
            icon: 'üí¨',
            weeks: '–ù–µ–¥–µ–ª–∏ 8-9',
            hours: 64,
            cost: 142000,
            status: 'pending',
            progress: 0,
            brief: '–î–∏–∞–ª–æ–≥ <5 —Å, –ø—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞',
            description: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.',
            tasks: [
                {text: '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —á–∞—Ç-–±–æ—Ç–∞', completed: false},
                {text: '–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å NLP-–æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤', completed: false},
                {text: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å WebSocket –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏', completed: false},
                {text: '–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å Telegram Bot API', completed: false},
                {text: '–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤', completed: false},
                {text: '–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ FAQ', completed: false}
            ]
        },
        {
            number: 6,
            name: 'PDF-—ç–∫—Å–ø–æ—Ä—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
            icon: 'üìÑ',
            weeks: '–ù–µ–¥–µ–ª—è 9',
            hours: 24,
            cost: 57000,
            status: 'progress',
            progress: 75,
            brief: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è DOCX/XLSX/PDF –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤',
            description: '–ú–æ–¥—É–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –≥–æ—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö.',
            tasks: [
                {text: '–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è DOCX –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', completed: true},
                {text: '–ù–∞—Å—Ç—Ä–æ–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç –≤ XLSX', completed: true},
                {text: '–°–æ–∑–¥–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤', completed: true},
                {text: '–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF', completed: false},
                {text: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–æ—Ä—Ç–∞', completed: false}
            ]
        },
        {
            number: 7,
            name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞',
            icon: 'üß™',
            weeks: '–ù–µ–¥–µ–ª–∏ 10-11',
            hours: 112,
            cost: 216000,
            status: 'testing',
            progress: 15,
            brief: '–Æ–Ω–∏—Ç-/–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ç—á—ë—Ç –æ –¥–µ—Ñ–µ–∫—Ç–∞—Ö',
            description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫.',
            tasks: [
                {text: '–ù–∞–ø–∏—Å–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ —é–Ω–∏—Ç-—Ç–µ—Å—Ç—ã', completed: true},
                {text: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', completed: true},
                {text: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', completed: false},
                {text: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', completed: false},
                {text: '–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', completed: false},
                {text: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π', completed: false},
                {text: '–°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ –¥–µ—Ñ–µ–∫—Ç–∞—Ö', completed: false}
            ]
        },
        {
            number: 8,
            name: '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –¥–µ–ø–ª–æ–π',
            icon: 'üöÄ',
            weeks: '–ù–µ–¥–µ–ª—è 12',
            hours: 40,
            cost: 80000,
            status: 'pending',
            progress: 0,
            brief: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –±—ç–∫–∞–ø—ã',
            description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω.',
            tasks: [
                {text: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD pipeline', completed: false},
                {text: '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ', completed: false},
                {text: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã', completed: false},
                {text: '–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ', completed: false},
                {text: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –Ω–∞–≥—Ä—É–∑–∫–∏', completed: false},
                {text: '–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã DevOps', completed: false}
            ]
        }
    ];

    const stageStmt = db.prepare(`
        INSERT INTO stages (number, name, icon, weeks, hours, cost, status, brief, description, progress)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);
    
    const taskStmt = db.prepare(`
        INSERT INTO tasks (stage_id, text, completed, position)
        VALUES (?, ?, ?, ?)
    `);

    defaultStages.forEach(stage => {
        stageStmt.run(
            stage.number,
            stage.name,
            stage.icon,
            stage.weeks,
            stage.hours,
            stage.cost,
            stage.status,
            stage.brief,
            stage.description,
            stage.progress,
            function(err) {
                if (!err) {
                    const stageId = this.lastID;
                    stage.tasks.forEach((task, index) => {
                        taskStmt.run(stageId, task.text, task.completed ? 1 : 0, index);
                    });
                }
            }
        );
    });

    stageStmt.finalize();
    taskStmt.finalize();
}

// API Routes

// Get all stages with tasks
app.get('/api/stages', (req, res) => {
    db.all(`
        SELECT * FROM stages ORDER BY number
    `, (err, stages) => {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }
        
        // Get tasks for each stage
        const stagesWithTasks = [];
        let processed = 0;
        
        if (stages.length === 0) {
            res.json([]);
            return;
        }
        
        stages.forEach(stage => {
            db.all(`
                SELECT * FROM tasks 
                WHERE stage_id = ? 
                ORDER BY position, id
            `, [stage.id], (err, tasks) => {
                if (!err) {
                    stage.tasks = tasks.map(t => ({
                        id: t.id,
                        text: t.text,
                        completed: t.completed === 1
                    }));
                } else {
                    stage.tasks = [];
                }
                
                stagesWithTasks.push(stage);
                processed++;
                
                if (processed === stages.length) {
                    // Sort by number before sending
                    stagesWithTasks.sort((a, b) => a.number - b.number);
                    res.json(stagesWithTasks);
                }
            });
        });
    });
});

// Create new stage
app.post('/api/stages', (req, res) => {
    const { name, icon, weeks, hours, cost, brief, description, tasks } = req.body;
    
    // Get max stage number
    db.get(`SELECT MAX(number) as maxNum FROM stages`, (err, row) => {
        const number = (row && row.maxNum) ? row.maxNum + 1 : 1;
        
        db.run(`
            INSERT INTO stages (number, name, icon, weeks, hours, cost, status, brief, description, progress)
            VALUES (?, ?, ?, ?, ?, ?, 'pending', ?, ?, 0)
        `, [number, name, icon || 'üìã', weeks, hours, cost, brief, description], function(err) {
            if (err) {
                res.status(500).json({ error: err.message });
                return;
            }
            
            const stageId = this.lastID;
            
            // Add tasks if provided
            if (tasks && tasks.length > 0) {
                const taskStmt = db.prepare(`
                    INSERT INTO tasks (stage_id, text, completed, position)
                    VALUES (?, ?, 0, ?)
                `);
                
                tasks.forEach((taskText, index) => {
                    taskStmt.run(stageId, taskText, index);
                });
                
                taskStmt.finalize();
            }
            
            res.json({ 
                id: stageId, 
                number,
                name,
                icon: icon || 'üìã',
                weeks,
                hours,
                cost,
                status: 'pending',
                brief,
                description,
                progress: 0
            });
        });
    });
});

// Update stage
app.put('/api/stages/:id', (req, res) => {
    const { id } = req.params;
    const { status, brief, description, progress, name, icon, weeks, hours, cost } = req.body;
    
    const updates = [];
    const values = [];
    
    if (status !== undefined) {
        updates.push('status = ?');
        values.push(status);
    }
    if (brief !== undefined) {
        updates.push('brief = ?');
        values.push(brief);
    }
    if (description !== undefined) {
        updates.push('description = ?');
        values.push(description);
    }
    if (progress !== undefined) {
        updates.push('progress = ?');
        values.push(progress);
    }
    if (name !== undefined) {
        updates.push('name = ?');
        values.push(name);
    }
    if (icon !== undefined) {
        updates.push('icon = ?');
        values.push(icon);
    }
    if (weeks !== undefined) {
        updates.push('weeks = ?');
        values.push(weeks);
    }
    if (hours !== undefined) {
        updates.push('hours = ?');
        values.push(hours);
    }
    if (cost !== undefined) {
        updates.push('cost = ?');
        values.push(cost);
    }
    
    if (updates.length === 0) {
        res.status(400).json({ error: 'No fields to update' });
        return;
    }
    
    values.push(id);
    
    db.run(`
        UPDATE stages 
        SET ${updates.join(', ')}, updated_at = CURRENT_TIMESTAMP
        WHERE id = ?
    `, values, function(err) {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }
        res.json({ success: true, changes: this.changes });
    });
});

// Delete stage
app.delete('/api/stages/:id', (req, res) => {
    const { id } = req.params;
    
    db.serialize(() => {
        // First delete all tasks for this stage
        db.run(`DELETE FROM tasks WHERE stage_id = ?`, [id], (err) => {
            if (err) {
                res.status(500).json({ error: err.message });
                return;
            }
            
            // Then delete the stage
            db.run(`DELETE FROM stages WHERE id = ?`, [id], function(err) {
                if (err) {
                    res.status(500).json({ error: err.message });
                    return;
                }
                
                // Renumber remaining stages
                db.run(`
                    UPDATE stages 
                    SET number = (
                        SELECT COUNT(*) + 1 
                        FROM stages s2 
                        WHERE s2.number < stages.number
                    )
                `, (err) => {
                    if (err) {
                        console.error('Error renumbering stages:', err);
                    }
                    res.json({ success: true, changes: this.changes });
                });
            });
        });
    });
});

// Add task
app.post('/api/stages/:stageId/tasks', (req, res) => {
    const { stageId } = req.params;
    const { text } = req.body;
    
    // Get max position
    db.get(`
        SELECT MAX(position) as maxPos FROM tasks WHERE stage_id = ?
    `, [stageId], (err, row) => {
        const position = (row && row.maxPos !== null) ? row.maxPos + 1 : 0;
        
        db.run(`
            INSERT INTO tasks (stage_id, text, completed, position)
            VALUES (?, ?, 0, ?)
        `, [stageId, text, position], function(err) {
            if (err) {
                res.status(500).json({ error: err.message });
                return;
            }
            res.json({ 
                id: this.lastID, 
                text, 
                completed: false,
                position 
            });
        });
    });
});

// Toggle task
app.put('/api/tasks/:id/toggle', (req, res) => {
    const { id } = req.params;
    
    db.run(`
        UPDATE tasks 
        SET completed = NOT completed
        WHERE id = ?
    `, [id], function(err) {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }
        
        // Get updated task
        db.get(`SELECT * FROM tasks WHERE id = ?`, [id], (err, task) => {
            if (err) {
                res.status(500).json({ error: err.message });
                return;
            }
            res.json({ 
                success: true, 
                completed: task.completed === 1 
            });
        });
    });
});

// Delete task
app.delete('/api/tasks/:id', (req, res) => {
    const { id } = req.params;
    
    db.run(`DELETE FROM tasks WHERE id = ?`, [id], function(err) {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }
        res.json({ success: true, changes: this.changes });
    });
});

// Update task text
app.put('/api/tasks/:id', (req, res) => {
    const { id } = req.params;
    const { text } = req.body;
    
    db.run(`
        UPDATE tasks 
        SET text = ?
        WHERE id = ?
    `, [text, id], function(err) {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }
        res.json({ success: true });
    });
});

// Get statistics
app.get('/api/stats', (req, res) => {
    const stats = {};
    
    db.all(`
        SELECT 
            COUNT(*) as total_stages,
            SUM(CASE WHEN status = 'complete' THEN 1 ELSE 0 END) as completed,
            SUM(CASE WHEN status = 'progress' THEN 1 ELSE 0 END) as in_progress,
            SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pending,
            SUM(CASE WHEN status = 'testing' THEN 1 ELSE 0 END) as testing,
            AVG(progress) as avg_progress,
            SUM(hours * progress / 100) as hours_worked,
            SUM(hours) as total_hours
        FROM stages
    `, (err, row) => {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }
        
        db.get(`
            SELECT 
                COUNT(*) as total_tasks,
                SUM(completed) as completed_tasks
            FROM tasks
        `, (err, taskStats) => {
            if (err) {
                res.status(500).json({ error: err.message });
                return;
            }
            
            res.json({
                ...row[0],
                ...taskStats
            });
        });
    });
});

// Export data
app.get('/api/export', (req, res) => {
    db.all(`
        SELECT * FROM stages ORDER BY number
    `, (err, stages) => {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }
        
        const exportData = [];
        let processed = 0;
        
        if (stages.length === 0) {
            res.json([]);
            return;
        }
        
        stages.forEach(stage => {
            db.all(`
                SELECT text, completed FROM tasks 
                WHERE stage_id = ? 
                ORDER BY position, id
            `, [stage.id], (err, tasks) => {
                const stageData = {
                    number: stage.number,
                    name: stage.name,
                    icon: stage.icon,
                    weeks: stage.weeks,
                    hours: stage.hours,
                    cost: stage.cost,
                    status: stage.status,
                    brief: stage.brief,
                    description: stage.description,
                    progress: stage.progress,
                    tasks: tasks.map(t => ({
                        text: t.text,
                        completed: t.completed === 1
                    }))
                };
                
                exportData.push(stageData);
                processed++;
                
                if (processed === stages.length) {
                    exportData.sort((a, b) => a.number - b.number);
                    res.setHeader('Content-Type', 'application/json');
                    res.setHeader('Content-Disposition', 'attachment; filename="project_stages.json"');
                    res.json(exportData);
                }
            });
        });
    });
});

// Import data
app.post('/api/import', (req, res) => {
    const stages = req.body;
    
    if (!Array.isArray(stages)) {
        res.status(400).json({ error: 'Invalid data format' });
        return;
    }
    
    db.serialize(() => {
        db.run('BEGIN TRANSACTION');
        
        // Clear existing data
        db.run('DELETE FROM tasks');
        db.run('DELETE FROM stages');
        
        const stageStmt = db.prepare(`
            INSERT INTO stages (number, name, icon, weeks, hours, cost, status, brief, description, progress)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        `);
        
        const taskStmt = db.prepare(`
            INSERT INTO tasks (stage_id, text, completed, position)
            VALUES (?, ?, ?, ?)
        `);
        
        let stageCount = 0;
        
        stages.forEach(stage => {
            stageStmt.run(
                stage.number,
                stage.name,
                stage.icon,
                stage.weeks,
                stage.hours,
                stage.cost,
                stage.status,
                stage.brief,
                stage.description,
                stage.progress || 0,
                function(err) {
                    if (!err) {
                        const stageId = this.lastID;
                        
                        if (stage.tasks && stage.tasks.length > 0) {
                            stage.tasks.forEach((task, index) => {
                                taskStmt.run(
                                    stageId, 
                                    task.text, 
                                    task.completed ? 1 : 0, 
                                    index
                                );
                            });
                        }
                    }
                    
                    stageCount++;
                    if (stageCount === stages.length) {
                        stageStmt.finalize();
                        taskStmt.finalize();
                        
                        db.run('COMMIT', (err) => {
                            if (err) {
                                db.run('ROLLBACK');
                                res.status(500).json({ error: err.message });
                            } else {
                                res.json({ success: true, imported: stages.length });
                            }
                        });
                    }
                }
            );
        });
    });
});

// Reset to default data
app.post('/api/reset', (req, res) => {
    db.serialize(() => {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        db.run('DELETE FROM tasks', (err) => {
            if (err) {
                console.error('Error deleting tasks:', err);
            }
        });
        
        db.run('DELETE FROM stages', (err) => {
            if (err) {
                console.error('Error deleting stages:', err);
            } else {
                // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
                setTimeout(() => {
                    initializeDefaultData();
                    setTimeout(() => {
                        res.json({ success: true, message: 'Data reset to default' });
                    }, 500);
                }, 100);
            }
        });
    });
});

// Start server
app.listen(PORT, () => {
    console.log(`
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë   Tender Project Management System         ‚ïë
    ‚ïë   Server running at:                       ‚ïë
    ‚ïë   http://localhost:${PORT}                 ‚ïë
    ‚ïë                                            ‚ïë
    ‚ïë   Database: tender_project.db              ‚ïë
    ‚ïë   API Endpoints:                           ‚ïë
    ‚ïë   GET    /api/stages                       ‚ïë
    ‚ïë   POST   /api/stages                       ‚ïë
    ‚ïë   PUT    /api/stages/:id                   ‚ïë
    ‚ïë   DELETE /api/stages/:id                   ‚ïë
    ‚ïë   POST   /api/stages/:id/tasks             ‚ïë
    ‚ïë   PUT    /api/tasks/:id/toggle             ‚ïë
    ‚ïë   DELETE /api/tasks/:id                    ‚ïë
    ‚ïë   GET    /api/stats                        ‚ïë
    ‚ïë   GET    /api/export                       ‚ïë
    ‚ïë   POST   /api/import                       ‚ïë
    ‚ïë   POST   /api/reset                        ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);
});

// Graceful shutdown
process.on('SIGINT', () => {
    db.close((err) => {
        if (err) {
            console.error(err.message);
        }
        console.log('\nDatabase connection closed.');
        process.exit(0);
    });
});
